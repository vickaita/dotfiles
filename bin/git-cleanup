#!/usr/bin/env bash

set -euo pipefail

show_help() {
    cat << EOF
git-cleanup - Delete merged branches

USAGE:
    git cleanup [OPTIONS]

OPTIONS:
    --dry-run              Show which branches would be deleted without deleting them
    --protect BRANCH       Additional branch to protect from deletion (can be used multiple times)
    -h, --help             Show this help message

DESCRIPTION:
    Deletes all local branches that have been merged into the current branch,
    except for protected branches. By default, protects: main, master, develop,
    and the current branch.

EXAMPLES:
    git cleanup --dry-run                    # Preview which branches would be deleted
    git cleanup                              # Delete merged branches
    git cleanup --protect staging            # Also protect 'staging' branch
    git cleanup --protect feature --protect hotfix  # Protect multiple additional branches
EOF
}

add_protected_branch() {
    local branch="$1"

    [[ -z "$branch" ]] && return

    for existing in "${protected_branches[@]-}"; do
        if [[ "$existing" == "$branch" ]]; then
            return
        fi
    done

    protected_branches+=("$branch")
}

is_protected() {
    local candidate="$1"

    for protected in "${protected_branches[@]-}"; do
        if [[ "$protected" == "$candidate" ]]; then
            return 0
        fi
    done

    return 1
}

branch_fully_merged() {
    local branch="$1"

    # Fast path for branches whose tip commit is already contained in HEAD
    if git merge-base --is-ancestor "$branch" HEAD >/dev/null 2>&1; then
        return 0
    fi

    # Fallback to patch-id comparison so squash merges are treated as merged
    if git cherry HEAD "$branch" | grep -q '^+'; then
        return 1
    fi

    return 0
}

main() {
    local dry_run=false
    local protected_branches=()

    add_protected_branch "main"
    add_protected_branch "master"
    add_protected_branch "develop"

    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            --dry-run)
                dry_run=true
                shift
                ;;
            --protect)
                if [[ -n "${2:-}" ]]; then
                    add_protected_branch "$2"
                    shift 2
                else
                    echo "Error: --protect requires a branch name" >&2
                    exit 1
                fi
                ;;
            -*)
                echo "Error: Unknown option $1" >&2
                echo "Use --help for usage information" >&2
                exit 1
                ;;
            *)
                echo "Error: Unexpected argument $1" >&2
                echo "Use --help for usage information" >&2
                exit 1
                ;;
        esac
    done

    if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        echo "Error: git-cleanup must be run inside a Git repository" >&2
        exit 1
    fi

    # Get current branch to protect it
    local current_branch
    current_branch=$(git branch --show-current 2>/dev/null || echo "")
    if [[ -n "$current_branch" ]]; then
        add_protected_branch "$current_branch"
    fi

    # Find candidate branches
    local all_branches_raw
    if ! all_branches_raw=$(git for-each-ref --format="%(refname:short)" refs/heads/ 2>/dev/null); then
        echo "Error: Unable to list local branches" >&2
        exit 1
    fi

    # Exclude protected branches and those that still contain unique changes
    local filtered_branches=()
    while IFS= read -r branch; do
        [[ -z "$branch" ]] && continue
        if ! is_protected "$branch" && branch_fully_merged "$branch"; then
            filtered_branches+=("$branch")
        fi
    done <<< "$all_branches_raw"

    if [[ ${#filtered_branches[@]} -eq 0 ]]; then
        echo "No merged branches to delete"
        exit 0
    fi

    if [[ "$dry_run" == "true" ]]; then
        echo "Would delete the following merged branches:"
        for branch in "${filtered_branches[@]}"; do
            echo "  $branch"
        done
        echo ""
        echo "Protected branches: ${protected_branches[*]}"
        exit 0
    fi

    echo "Deleting merged branches:"
    for branch in "${filtered_branches[@]}"; do
        echo "  $branch"
    done
    echo ""

    # Delete the branches
    local deleted_count=0
    for branch in "${filtered_branches[@]}"; do
        if git branch -d "$branch" 2>/dev/null; then
            echo "Deleted: $branch"
            ((deleted_count++))
        else
            echo "Failed to delete: $branch" >&2
        fi
    done

    echo ""
    echo "Deleted $deleted_count merged branch(es)"
}

main "$@"
